@import "../settings";

img.full-width,
svg.full-width
{
	display: block;
	margin: 0 auto;
	width: 100%;
	max-height: 100vh;
}

img.center,
svg.center
{
	display: block;
	margin: 0 auto;
	max-width: 100%;
	max-height: 100vh;
}

img.shadow,
svg.shadow,
.image-overlay-text.shadow
{
	box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);
}

img.white-margin,
svg.white-margin
{
	background: white;
	padding: 10px;
}

img.circle,
svg.circle
{
	border-radius: 100%;
}

.dark img.dark-invert,
.dark svg.dark-invert
{
	filter: invert(1);
}

@mixin img-left-right
{
	max-width: calc(50% - 1.5em);
	max-height: 100vh;
	margin: 0.4em 0 1em 0;
}
@mixin too-narrow
{
	float: none;
	display: block;
	max-width: 100%;
	&.narrow-left
	{
		margin-left: 0;
	}
	&.narrow-right
	{
		margin-left: auto;
	}
	&.narrow-center
	{
		margin-left: auto;
		margin-right: auto;
	}
	&.narrow-full-width
	{
		margin-left: 0;
		margin-right: 0;
		width: 100%;
		max-height: 100vh;
	}
}
@mixin too-narrow-left
{
	@include too-narrow;
	margin-right: 0;
}
@mixin too-narrow-right
{
	@include too-narrow;
	margin-left: 0;
}

img.left,
svg.left
{
	@include img-left-right;
	clear: left;
	float: left;
	margin-right: 1.5em;

	@media (max-width: $viewportWidthPhone)
	{
		&.require-minitab { @include too-narrow-left; }
	}
	@media (max-width: $viewportWidthMinitab)
	{
		&.require-tablet { @include too-narrow-left; }
	}
	@media (max-width: $viewportWidthTablet)
	{
		&.require-desktop { @include too-narrow-left; }
	}
	@media (max-width: $viewportWidthDesktop)
	{
		&.require-wide { @include too-narrow-left; }
	}
}

img.right,
svg.right
{
	@include img-left-right;
	clear: right;
	float: right;
	margin-left: 1.5em;

	@media (max-width: $viewportWidthPhone)
	{
		&.require-minitab { @include too-narrow-right; }
	}
	@media (max-width: $viewportWidthMinitab)
	{
		&.require-tablet { @include too-narrow-right; }
	}
	@media (max-width: $viewportWidthTablet)
	{
		&.require-desktop { @include too-narrow-right; }
	}
	@media (max-width: $viewportWidthDesktop)
	{
		&.require-wide { @include too-narrow-right; }
	}
}

div.image-full-width
{
	clear: both;
	font-size: 0.85em;
	line-height: 130%;
	text-align: center;
	padding: 0 2em;
	color: $imageSubtitleColor;
	.dark &
	{
		color: $darkImageSubtitleColor;
	}

	img,
	svg
	{
		display: block;
		margin: 0 -2em 0.5em;
		width: calc(100% + 4em) !important;
		max-height: 100vh;
	}
}

div.image-center
{
	clear: both;
	font-size: 0.85em;
	line-height: 130%;
	text-align: center;
	padding: 0 2em;
	color: $imageSubtitleColor;
	.dark &
	{
		color: $darkImageSubtitleColor;
	}

	img,
	svg
	{
		display: block;
		margin: 0 auto 0.5em;
		max-width: 100%;
		max-height: 100vh;
	}
}

@mixin div-img-left-right
{
	margin: 0.4em 0 1em 0;
	max-width: calc(50% - 1.5em);
	font-size: 0.85em;
	line-height: 130%;
	color: $imageSubtitleColor;
	.dark &
	{
		color: $darkImageSubtitleColor;
	}

	img,
	svg
	{
		display: block;
		width: 100%;
		max-width: 100%;
		max-height: 100vh;
		margin-bottom: 0.5em;
	}
}
@mixin div-too-narrow
{
	float: none;
	max-width: 100%;
	img,
	svg
	{
		width: inherit;
	}
	&.narrow-left
	{
		text-align: left;
		img,
		svg
		{
			margin-left: 0;
		}
	}
	&.narrow-right
	{
		text-align: right;
		img,
		svg
		{
			margin-left: auto;
		}
	}
	&.narrow-center
	{
		text-align: center;
		img,
		svg
		{
			margin-left: auto;
			margin-right: auto;
		}
	}
	&.narrow-full-width
	{
		img,
		svg
		{
			margin-left: 0;
			margin-right: 0;
			width: 100%;
			max-height: 100vh;
		}
	}
}
@mixin div-too-narrow-left
{
	@include div-too-narrow;
	margin-right: 0;
}
@mixin div-too-narrow-right
{
	@include div-too-narrow;
	margin-left: 0;
	img,
	svg
	{
		margin-left: auto;
	}
}

div.image-left
{
	@include div-img-left-right;
	clear: left;
	float: left;
	margin-right: 1.5em;
	text-align: left;

	@media (max-width: $viewportWidthPhone)
	{
		&.require-minitab { @include div-too-narrow-left; }
	}
	@media (max-width: $viewportWidthMinitab)
	{
		&.require-tablet { @include div-too-narrow-left; }
	}
	@media (max-width: $viewportWidthTablet)
	{
		&.require-desktop { @include div-too-narrow-left; }
	}
	@media (max-width: $viewportWidthDesktop)
	{
		&.require-wide { @include div-too-narrow-left; }
	}
}

div.image-right
{
	@include div-img-left-right;
	clear: right;
	float: right;
	margin-left: 1.5em;
	text-align: right;

	@media (max-width: $viewportWidthPhone)
	{
		&.require-minitab { @include div-too-narrow-right; }
	}
	@media (max-width: $viewportWidthMinitab)
	{
		&.require-tablet { @include div-too-narrow-right; }
	}
	@media (max-width: $viewportWidthTablet)
	{
		&.require-desktop { @include div-too-narrow-right; }
	}
	@media (max-width: $viewportWidthDesktop)
	{
		&.require-wide { @include div-too-narrow-right; }
	}
}

div.image-overlay-text,
a.image-overlay-text
{
	position: relative;
	display: block;
	
	// Undo other 'image with subtitle' styles
	font-size: 20px;
	line-height: 28px;
	text-align: left;
	color: inherit;

	// Place any child element over the image
	> *
	{
		position: absolute;
		top: 8%;
		left: 8%;
		right: 8%;
		&.bottom
		{
			top: unset;
			bottom: 8%;
		}
		&.center
		{
			text-align: center;
		}
		&.right
		{
			text-align: right;
		}
		> span
		{
			// This is a compromise style. It uses an opaque background to prevent increased opacity
			// in the areas where the lines overlap slightly. This is replaced with an overall
			// opacity value for the entire element. This also affects the text! Since the
			// transparency is only little, it doesn't hurt much.
			padding: 2px 7px;
			background: #ffffff;
			color: #000000;
			opacity: 0.8;
			hyphens: auto;
			box-decoration-break: clone;
			-webkit-box-decoration-break: clone;
			transition: opacity $animationDuration $animationFunction;
			&.dark
			{
				background: #000000;
				color: #ffffff;
			}
		}
		&.ff-background-only
		{
			// The above compromise is improved through a little piece of JavaScript that duplicates
			// these spans and uses one for the background (with the opaque background and overall
			// transparency) and another one for the text (with no transparency). The other element
			// is set to transparent then.
			> span
			{
				color: transparent;
				&.dark
				{
					color: transparent;
				}
			}
		}
		&.ff-foreground-only
		{
			> span
			{
				opacity: 1;
				background: transparent;
				&.dark
				{
					background: transparent;
				}
			}
		}
	}
	// Restore position for the image itself
	> img
	{
		position: unset;
		display: block;
		transition: transform $animationDuration cubic-bezier(0, 0, 0, 1);
	}
}
a.image-overlay-text
{
	overflow: hidden;

	> * > span
	{
		color: $linkColor;
		&.dark
		{
			background: $linkColor;
		}
	}
	&:hover,
	&:focus
	{
		// Intensify text background a little on hovering the image
		> :not(.ff-foreground-only)
		{
			> span
			{
				opacity: 0.87;
			}
			> span.dark
			{
				background: darken($linkColor, 15%);
			}
		}
		// Additional image outline (does not extend the bounding box or resize the image)
		> img
		{
			//border: 3px solid $linkColor;
			//outline: 3px solid rgba($linkColor, 0.8);
			//outline-offset: -3px;
			transform: scale(1.07);
		}
	}
}

@mixin x-too-narrow
{
	grid-template-columns: 1fr !important;
	&.narrow-left
	{
		justify-items: start;
		> *
		{
			width: unset;
		}
	}
	&.narrow-right
	{
		justify-items: end;
		> *
		{
			width: unset;
		}
	}
	&.narrow-center
	{
		> *
		{
			width: unset;
		}
	}
	&.narrow-x2
	{
		grid-template-columns: repeat(2, 1fr) !important;
	}
}

div.image-x2,
div.image-x3,
div.image-x4
{
	display: grid;
	grid-gap: 2em;
	justify-items: center;
	align-items: center;
	grid-auto-flow: row;
	&.top
	{
		align-items: start;
	}
	&.bottom
	{
		align-items: end;
	}
	> *
	{
		width: 100%;
		height: 100%;
		min-height: 50px;   // Layout protection if no image loads
	}
	> * > img
	{
		width: 100%;
		//height: 100%;   // Keep all images in a row at the same height
		min-height: 50px;   // Layout protection if no image loads
	}

	@media (max-width: $viewportWidthPhone)
	{
		&.require-minitab { @include x-too-narrow; }
	}
	@media (max-width: $viewportWidthMinitab)
	{
		&.require-tablet { @include x-too-narrow; }
	}
	@media (max-width: $viewportWidthTablet)
	{
		&.require-desktop { @include x-too-narrow; }
	}
	@media (max-width: $viewportWidthDesktop)
	{
		&.require-wide { @include x-too-narrow; }
	}
}
div.image-x2
{
	grid-template-columns: repeat(2, 1fr);
}
div.image-x3
{
	grid-template-columns: repeat(3, 1fr);
}
div.image-x4
{
	grid-template-columns: repeat(4, 1fr);
}
