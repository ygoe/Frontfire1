@import "../settings";

$_defaultLineHeight: round($defaultFontSize * $defaultLineHeight);
$_monospaceLineHeight: round($monospaceFontSize * $monospaceLineHeight);

.dark
{
	background-color: $darkBackground;
	color: $darkTextColor;
}

// ========== Fonts ==========

html,
body,
input,
button,
select,
textarea,
kbd
{
	font-family: $defaultFontFamily;
	font-size: $defaultFontSize;
	line-height: $_defaultLineHeight;
}

code,
tt,
pre,
samp,
div.code,
input.monospace,
textarea.monospace,
.monospace
{
	font-family: $monospaceFontFamily;
	font-size: $monospaceFontSize;
	line-height: $_monospaceLineHeight;
}

// ========== Headers ==========

h1
{
	font-size: round($defaultFontSize * 1.9);
	line-height: round($defaultFontSize * 1.9 * $defaultLineHeight);
	font-weight: $headingWeight;
	margin: 28px 0 24px;
}
h2
{
	font-size: round($defaultFontSize * 1.5);
	line-height: round($defaultFontSize * 1.5 * $defaultLineHeight);
	font-weight: $headingWeight;
	margin: 24px 0 1rem;
}
h3
{
	font-size: round($defaultFontSize * 1.2);
	line-height: round($defaultFontSize * 1.2 * $defaultLineHeight);
	font-weight: $headingWeight;
	margin: 20px 0 1rem;
}
h4
{
	font-size: round($defaultFontSize * 1.1);
	line-height: round($defaultFontSize * 1.1 * $defaultLineHeight);
	font-weight: $headingWeight;
	margin: 1rem 0;
}
h5,
h6
{
	font-size: $defaultFontSize;
	font-weight: $headingWeight;
	margin: 1rem 0;
}

// ========== Paragraphs ==========

p,
div.p,
table.p
{
	margin-top: 1em;
	margin-bottom: 1em;
	&.double-margin
	{
		margin-top: 2em;
		margin-bottom: 2em;
	}
}

p.left-align,
div.left-align
{
	text-align: left;
}

p.right-align,
div.right-align
{
	text-align: right;
}

p.center,
div.center
{
	text-align: center;
}

p.justify,
div.justify
{
	text-align: justify;
}

.larger
{
	font-size: $largerFontSize !important;
	line-height: $largerLineHeight !important;
}
.smaller
{
	font-size: $smallerFontSize !important;
	line-height: $smallerLineHeight !important;
}

.no-top-margin
{
	margin-top: 0 !important;
}
.no-bottom-margin
{
	margin-bottom: 0 !important;
}
.no-vertical-margin
{
	margin-top: 0 !important;
	margin-bottom: 0 !important;
}

// ========== Links ==========

a
{
	transition: color $animationDuration $animationFunction;
	&:link,
	&:visited
	{
		color: $linkColor;
		text-decoration: none;
		&:hover
		{
			color: $linkHoverColor;
			transition: color 0s;
		}
	}
	.dark &
	{
		&:link,
		&:visited
		{
			color: $darkLinkColor;
			&:hover
			{
				color: $darkLinkHoverColor;
				transition: color 0s;
			}
		}
	}
	&[disabled]
	{
		color: $disabledLabelColor;
	}
}

// ========== Tables ==========

table
{
	border: 1px solid $tableGridColor;
	border-collapse: collapse;
	.dark &
	{
		border-color: $darkTableGridColor;
	}

	th,
	td
	{
		border: 1px solid $tableGridColor;
		padding: 3px 6px;
		.dark &
		{
			border-color: $darkTableGridColor;
		}

		// Compensate padding for nested tables
		> table
		{
			margin-top: -3px;
			margin-bottom: -3px;
		}
	}
	th
	{
		background-color: $tableHeaderBackground;
		text-align: left;
		.dark &
		{
			background-color: $darkTableHeaderBackground;
		}
	}
	tr.hidden-row
	{
		th,
		td
		{
			border: none;   // it would collapse into the other visible rows (if hidden with visibility: collapse)
		}
	}

	&.compact
	{
		th,
		td
		{
			border: none;
			padding: 0 6px 0 0;

			// Un-compensate padding for nested tables
			> table
			{
				margin-top: 0;
				margin-bottom: 0;
			}
		}
		td:last-child,
		td.last-column
		{
			padding-right: 0;
		}
	}
}

// Remove outer border around table
table.no-border
{
	border: none;

	th:first-child,
	td:first-child,
	td.first-column
	{
		border-left: none;
	}
	th:last-child,
	td:last-child,
	td.last-column
	{
		border-right: none;
	}
	tr:first-child,
	tr.first-row
	{
		> th,
		> td
		{
			border-top: none;
		}
	}
	tr:last-child,
	tr.last-row
	{
		> th,
		> td
		{
			border-bottom: none;
		}
	}
}

// Remove vertical/horizontal grid lines between cells
table.no-vgrid,
table.no-grid
{
	th,
	td
	{
		border-left: none;
		border-right: none;
	}
}
table.no-hgrid,
table.no-grid
{
	th,
	td
	{
		border-top: none;
		border-bottom: none;
	}
}

// Remove cell padding at the outer table edges (left and right)
table.no-outer-padding
{
	td:first-child,
	td.first-column
	{
		padding-left: 0;
	}
	td:last-child,
	td.last-column
	{
		padding-right: 0;
	}
}

// Remove padding in table cells
table.no-padding
{
	th,
	td
	{
		padding: 0;
	}
}

// Spread all columns across the entire available width instead of auto-width
table.full-width
{
	width: 100%;
}

// Horizontal/vertical alignment in all table cells
table.center
{
	th,
	td
	{
		text-align: center;
	}
}
table.top
{
	th,
	td
	{
		vertical-align: top;
	}
}

// Horizontal/vertical alignment in a table cell
th.left,
td.left
{
	text-align: left !important;
}
th.center,
td.center
{
	text-align: center !important;
}
th.right,
td.right
{
	text-align: right !important;
}
th.top,
td.top
{
	vertical-align: top !important;
}

// Links in a table cell fill the entire cell, making a bigger click area especially for shorter link texts
table.big-links tr td > a
{
	display: block;
}

// Rows as tall as if there would be a button in them (also more touch-friendly)
table.tall-rows
{
	td
	{
		// button vertical padding + td vertical padding + td one vertical border side
		height: calc(#{$_defaultLineHeight} + 17px);
	}
	&.no-border
	{
		tr:last-child > td,
		tr.last-row > td
		{
			// one less for the last row
			height: calc(#{$_defaultLineHeight} + 16px);
		}
	}
	&.big-links tr td > a
	{
		// Same vertical padding as button
		padding: 5px 0;
	}
}

table.sticky-header thead th
{
	position: sticky;
	top: 0px;
	z-index: 2;
}

// ========== Others ==========

// Adds a float break before and after the element
// (also available as a reusable mixin for adding to other classes)
@mixin clearfix
{
	&::before,
	&::after
	{
		content: "";
		display: table;
		clear: both;
	}
}
.clearfix
{
	@include clearfix;
}

hr
{
	clear: both;
	margin: 1rem 0;
	border: none;
	border-top: 1px solid $tableGridColor;
	&.wide
	{
		margin: 2rem 0;
	}
	.dark &
	{
		border-top-color: $darkTableGridColor;
	}
}

code,
div.code
{
	background-color: $codeBackground;
	padding: $codeInlinePadding;
	hyphens: none;
	overflow-wrap: break-word;
	transition: background-color $animationDuration $animationFunction;
	.dark &
	{
		background-color: $darkCodeBackground;
	}
}
div.code
{
	padding: $codePadding;
}

kbd
{
	display: inline-block;
	border: 1px solid #ccc;
	border-color: #ddd #bbb #aaa #ccc;
	border-radius: 2px;
	line-height: calc(#{$_defaultLineHeight} - 3px);
	background-color: #f6f6f6;
	padding: 0 2px 1px;
}

.nowrap
{
	white-space: nowrap;
}
.nowrap-require-minitab
{
	white-space: nowrap;
	@media (max-width: $viewportWidthPhone)
	{
		white-space: inherit;
	}
}
.nowrap-require-tablet
{
	white-space: nowrap;
	@media (max-width: $viewportWidthMinitab)
	{
		white-space: inherit;
	}
}
.nowrap-require-desktop
{
	white-space: nowrap;
	@media (max-width: $viewportWidthTablet)
	{
		white-space: inherit;
	}
}
.nowrap-require-wide
{
	white-space: nowrap;
	@media (max-width: $viewportWidthDesktop)
	{
		white-space: inherit;
	}
}

span.vertical
{
	-ms-writing-mode: tb-rl; 
	-webkit-writing-mode: vertical-rl;
	-moz-writing-mode: vertical-rl;
	-ms-writing-mode: vertical-rl;
	writing-mode: vertical-rl;
	transform: rotate(180deg);
}

// ========== Loading indicator ==========

i.loading
{
	display: inline-block;
	font-size: 32px;
	width: 1em;
	height: 1em;

	&::before
	{
		display: block;
		content: '';
		box-sizing: border-box;
		width: 100%;
		height: 100%;
		border-radius: 100%;
		border-width: 0.15em;
		border-style: solid;
		border-color: rgba(0, 0, 0, 0.6) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1);
		animation: loading 0.8s linear;
		animation-iteration-count: infinite;
	}
	&.inverted::before
	{
		border-color: rgba(255, 255, 255, 0.8) rgba(255, 255, 255, 0.15) rgba(255, 255, 255, 0.15);
	}

	.dark &
	{
		&::before
		{
			border-color: rgba(255, 255, 255, 0.8) rgba(255, 255, 255, 0.15) rgba(255, 255, 255, 0.15);
		}
		&.inverted::before
		{
			border-color: rgba(0, 0, 0, 0.6) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1);
		}
	}

	&.thin::before
	{
		border-width: 0.08em;
	}
	&.thick::before
	{
		border-width: 0.25em;
	}

	&.small { font-size: 16px; }
	&.medium { font-size: 24px; }
	&.large { font-size: 64px; }
}

@keyframes loading
{
	0% { transform: rotate(0); }
	100% { transform: rotate(360deg); }
}

div.icon-label
{
	text-align: center;
	i:empty
	{
		display: block;
		margin: 0 auto 4px;
	}
}
